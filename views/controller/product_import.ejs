<div class="page-header">
    <h1>
        <%= title %>
    </h1>
    <form class="form-inline" id="uploadform">
        <div class="form-group">
            <label class="sr-only" for="file">Product XLSX File</label>
            <input type="file" class="btn btn-default" id="file" multiple />
        </div>
        <button type="submit" id="upload_button" class="btn btn-default">Upload</button>
        <div class="checkbox">
            <label>
                    <input id="overwrite-translation" type="checkbox"> Overwrite Translation
            </label>
        </div>
        <button id="writeDatabase" class="btn btn-primary pull-right">Write into Database</button>
    </form>
</div>
<table id="product_import_table" class="table table-striped table-bordered table-hover" cellspacing="0" width="100%"></table>

<div class="modal fade" id="processing_modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="model_title"></h4>
            </div>
            <div class="modal-body">
                <div class="progress">
                    <div id="progress_bar" class="progress-bar progress-bar-success progress-bar-striped active" role="progressbar" style="width: 0%">
                        0%
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="done_button" type="button" class="btn btn-default" data-dismiss="modal">Done</button>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(() => {
        let table = {
            destroy: function () { }
        };
        $("#writeDatabase").prop("disabled", true);
        const socket = io.connect(`http://${window.location.host}/uploadProduct`);
        const uploader = new SocketIOFileClient(socket);

        let uploadform = document.getElementById('uploadform');

        uploadform.onsubmit = (ev) => {
            ev.preventDefault();
            table.destroy();
            uploader.upload(document.getElementById('file'));
        };

        uploader.on('start', function (fileInfo) {
            console.log('Start uploading', fileInfo);
            ProgressStart("upload");
        });
        uploader.on('stream', function (fileInfo) {
            setProgressBar("upload", fileInfo.sent, fileInfo.size);
        });
        uploader.on('complete', function (fileInfo) {
            console.log('Upload Completed', fileInfo);
            ProgressEnd("upload", fileInfo);
        });
        uploader.on('error', function (err) {
            alert(err);
        });
        uploader.on('abort', function (fileInfo) {
            alert(fileInfo);
        });
        socket.on('parseFile', function (data) {
            table = $('#product_import_table')
                .on('error.dt', function (e, settings, techNote, message) {
                    console.log('An error has been reported by DataTables: ', message);
                    console.log(e);
                    console.log(techNote);
                    console.log(settings);
                    $("#writeDatabase").prop("disabled", true);
                }).on('draw.dt', function () {
                    $("#writeDatabase").prop("disabled", false);
                    $("#upload_button").text("Re-Upload");
                }).DataTable({
                    data: data,
                    columns: [
                        { title: "ProductId" },
                        { title: "ASIN" },
                        { title: "URL" },
                        { title: "ShortURL" },
                        { title: "ProductName" },
                        { title: "SalesRank" },
                        { title: "ProductImage" },
                        { title: "ProductImageSet" },
                        { title: "Brand" },
                        { title: "Manufactor" },
                        { title: "EAN" },
                        { title: "PZN" },
                        { title: "Description" },
                        { title: "DescriptionCN" },
                        { title: "Price" },
                        { title: "PriceCurrency" },
                        { title: "Shipping" },
                        { title: "Title" },
                        { title: "TitleCN" },
                        { title: "ShopName" },
                        { title: "ShopId" },
                        { title: "Category" },
                        { title: "Weight" },
                        { title: "ItemDimensions" },
                        { title: "PackageDimensions" },
                        { title: "LastProductChange" },
                        { title: "DeliveryTime" },
                        { title: "Keywords" },
                        { title: "Source" },
                        { title: "Translated" }
                    ]
                });
        });

        $("#writeDatabase").click((e) => {
            e.preventDefault();
            socket.emit("write", { overwrite: $("#overwrite-translation").prop('checked') });
            ProgressStart("database");
        });
        socket.on('write-completed', (result) => {
            ProgressEnd("database", result);
            alert(`Write Database Result: ${result.result}\nMessage: ${result.message}`);
            console.log(result);
        });
        socket.on('writing', (info) => {
            setProgressBar("database", info.current, info.sum);
        });


        function setProgressBar(type, number1, number2) {
            if (type == "upload") {
                let value = number1 / number2;
                let _value = `${(value * 100).toFixed(2)}%`;
                $("#progress_bar").width(_value);
                $("#progress_bar").html(_value);
            } else {
                let value = number1 / number2;
                let _value = `${(value * 100).toFixed(2)}%`;
                $("#progress_bar").width(_value);
                $("#progress_bar").html(`${number1} Products of ${number2} Products writed into Database, Now ${_value}`);
            }
        }

        function ProgressStart(type) {
            setProgressBar(0);
            $("#progress_bar").html("");
            if (type == "upload") {
                $("#model_title").text("Uploading");
            } else {
                $("#model_title").text("Writing into Database");
            }
            $('#done_button').hide();
            $('#processing_modal').modal({
                backdrop: 'static',
                keyboard: false
            });
        }

        function ProgressEnd(type, info) {
            setProgressBar(1);
            if (type == "upload") {
                $("#progress_bar").html(`"Uploading finished! ${(info.size / 1024 / 1024).toFixed(2)} MB uploaded, and costed ${(info.estimated / 1000).toFixed(1)} seconds!"`);
            } else {
                $("#progress_bar").html(`"Writing Database finished! ${info.sum} Products inserted"`);
            }
            $('#done_button').fadeIn();
        }
    });

</script>